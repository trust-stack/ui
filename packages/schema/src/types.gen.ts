// This file is auto-generated by @hey-api/openapi-ts

export type CreateTenantUser = {
    [key: string]: unknown;
};

export type TenantUser = {
    /**
     * The ID of the tenant user
     */
    id: string;
    /**
     * The ID of the tenant
     */
    tenantId: string;
    /**
     * The name of the tenant user
     */
    name: string;
    /**
     * The email of the tenant user
     */
    email: string;
    /**
     * The date and time the tenant user was created
     */
    createdAt: string;
    /**
     * The date and time the tenant user was updated
     */
    updatedAt: string;
};

export type UpdateTenantUser = {
    [key: string]: unknown;
};

export type CreateBioLock = {
    /**
     * The id of the bio lock
     */
    id: string;
    /**
     * The epc identified assigned the trace lock
     */
    epc: string;
};

export type BioLock = {
    /**
     * The id of the bio lock
     */
    id: string;
    /**
     * The epc identified assigned the trace lock
     */
    epc: string;
    /**
     * The tenant id of the bio lock
     */
    createdAt: string;
    /**
     * The updated at date of the bio lock
     */
    updatedAt: string;
};

export type CreateTheme = {
    /**
     * The name of the theme
     */
    name: string;
    /**
     * The color of the theme, used to generate the pallette.
     */
    color: string;
};

export type Theme = {
    /**
     * The ID of the theme
     */
    id: string;
    /**
     * The name of the theme
     */
    name: string;
    /**
     * The theme palette
     */
    variables: {
        [key: string]: unknown;
    };
    /**
     * The date the theme was created
     */
    createdAt: string;
    /**
     * The date the theme was last updated
     */
    updatedAt: string;
    /**
     * The organization that owns the theme
     */
    organizationId: string;
};

export type UpdateTheme = {
    /**
     * The name of the theme
     */
    name: string;
    /**
     * The color of the theme
     */
    color: string;
};

export type CreateOrganizationTheme = {
    /**
     * The primary color for the organization theme in hex format
     */
    color: string;
    /**
     * The ID of the icon uploaded to the object storage
     */
    icon: string;
};

export type S3Object = {
    /**
     * The ID of the object
     */
    id: string;
    /**
     * Presigned URL of the object
     */
    url: string;
    /**
     * The key of the object
     */
    key: string;
    /**
     * The MIME type of the object
     */
    mimeType?: string;
    /**
     * The size of the object
     */
    size?: number;
    /**
     * The tenant ID of the object
     */
    createdAt: string;
    /**
     * The updated at date of the object
     */
    updatedAt: string;
};

export type OrganizationTheme = {
    /**
     * Unique identifier for the organization theme
     */
    id: string;
    /**
     * The associated icon organization theme
     */
    icon: S3Object;
    /**
     * The associated theme containing styles and variables
     */
    variables: {
        [key: string]: unknown;
    };
    /**
     * The date and time the organization theme was created
     */
    createdAt: string;
    /**
     * The date and time the organization theme was updated
     */
    updatedAt: string;
};

export type S3UploadObject = {
    /**
     * The MIME type of the object
     */
    mimeType: string;
    /**
     * The size of the object
     */
    size: number;
};

export type S3UploadResponse = {
    /**
     * The presigned URL to upload the file to
     */
    url: string;
    /**
     * The created S3 object record
     */
    s3ObjectId: string;
};

export type CreateLink = {
    /**
     * The path of the Link.
     */
    path: string;
    /**
     * The type of the Link.
     */
    relationType: string;
    /**
     * The title of the Link.
     */
    title?: string;
    /**
     * The href of the Link.
     */
    href: string;
    /**
     * The type of the Link.
     */
    type?: string;
    /**
     * The href language of the Link.
     */
    hreflang?: Array<string>;
    /**
     * Whether the Link is the default Link.
     */
    default?: boolean;
};

export type LinkConfiguration = {
    /**
     * The id of the Link.
     */
    id: string;
    /**
     * The created at date of the Link.
     */
    createdAt: string;
    /**
     * The updated at date of the Link.
     */
    updatedAt: string;
    /**
     * The path of the Link.
     */
    path: string;
    /**
     * The type of the Link.
     */
    type: string;
    /**
     * The title of the Link.
     */
    title?: string;
    /**
     * The href of the Link.
     */
    href: string;
    /**
     * The href of the Link.
     */
    hrefLang?: Array<string>;
};

export type CanvasTemplate = {
    /**
     * The unique identifier of the canvas template
     */
    id: string;
    /**
     * The name of the template
     */
    name?: string;
    /**
     * The Handlebars template string
     */
    template: string;
    /**
     * JSON schema defining the template variables
     */
    schema: {
        [key: string]: unknown;
    };
    /**
     * When the template was created
     */
    createdAt: string;
    /**
     * When the template was last updated
     */
    updatedAt: string;
};

export type CreateCanvasTemplate = {
    name: string;
    template: string;
    schema: {
        [key: string]: unknown;
    };
    themeId?: string;
};

export type CanvasTemplateInstance = {
    id: string;
    templateId: string;
    variables: {
        [key: string]: unknown;
    };
    renderedOutput: string;
    createdAt: string;
    updatedAt: string;
};

export type CreateCredentialIssuerProfile = {
    /**
     * The name of the issuer party or organization for this profile.
     */
    name: string;
    /**
     * The identifier (did:web) used to identify the issuer for this profile.
     */
    identifierId: string;
};

/**
 * The profile used to issue credentials such as Digital Product Passports against.
 */
export type CredentialIssuerProfile = {
    /**
     * The unique identifier of the credential issuer profile.
     */
    id: string;
    /**
     * The organization name used in credential issuance.
     */
    name: string;
    /**
     * The identifier used to issue credentials.
     */
    identifierId: string;
};

export type Paginated = {
    total: number;
    page: number;
    limit: number;
};

export type PaginatedCredentialIssuerProfiles = {
    /**
     * The list of credential issuer profiles
     */
    items: Array<CredentialIssuerProfile>;
    /**
     * The pagination metadata
     */
    metadata: Paginated;
};

export type IssueCredentialRequest = {
    [key: string]: unknown;
};

/**
 * A JSON-LD Verifiable Credential without a proof.
 */
export type Credential = {
    /**
     * The JSON-LD context of the credential.
     */
    '@context': Array<string>;
    /**
     * The ID of the credential.
     */
    id: string;
    /**
     * The JSON-LD type of the credential.
     */
    type: Array<string>;
    /**
     * The issuer of the credential.
     */
    issuer: string;
    /**
     * The issuance date of the credential.
     */
    issuanceDate: string;
    /**
     * The expiration date of the credential.
     */
    expirationDate: string;
    /**
     * The subject of the credential.
     */
    credentialSubject: {
        [key: string]: unknown;
    };
};

export type IssueCredentialResponse = {
    /**
     * Credential issued.
     */
    credential: Credential;
};

export type LinkedDataProof = {
    type: string;
    created: string;
    verificationMethod: string;
    proofPurpose: string;
    jws: string;
};

export type VerifiableCredential = {
    /**
     * The JSON-LD context of the credential.
     */
    '@context': Array<string>;
    /**
     * The ID of the credential.
     */
    id: string;
    /**
     * The JSON-LD type of the credential.
     */
    type: Array<string>;
    /**
     * The issuer of the credential.
     */
    issuer: string;
    /**
     * The issuance date of the credential.
     */
    issuanceDate: string;
    /**
     * The expiration date of the credential.
     */
    expirationDate: string;
    /**
     * The subject of the credential.
     */
    credentialSubject: {
        [key: string]: unknown;
    };
    proof: LinkedDataProof;
};

/**
 * Options for specifying how the LinkedDataProof is created.
 */
export type VerifyOptions = {
    /**
     * The URI of the verificationMethod used for the proof. Default assertionMethod URI.
     */
    verificationMethod?: string;
    /**
     * The purpose of the proof. Default 'assertionMethod'.
     */
    proofPurpose?: string;
    /**
     * The date and time of the proof (with a maximum accuracy in seconds). Default current system time.
     */
    created?: string;
    /**
     * A challenge provided by the requesting party of the proof. For example 6e62f66e-67de-11eb-b490-ef3eeefa55f2
     */
    challenge?: string;
    /**
     * The intended domain of validity for the proof. For example website.example
     */
    domain?: string;
};

export type VerifyCredentialRequest = {
    verifiableCredential: VerifiableCredential;
    options?: VerifyOptions;
};

export type VerifyCredentialResponse = {
    /**
     * The checks performed
     */
    checks: Array<Array<unknown>>;
    /**
     * Warnings
     */
    warnings: Array<Array<unknown>>;
    /**
     * Errors
     */
    errors: Array<Array<unknown>>;
};

export type CreateCustodyCommission = {
    /**
     * The unique identifier for this commission
     */
    identifier: string;
    /**
     * List of registered consumer IDs
     */
    registeredConsumers?: Array<string>;
};

export type CustodyCommission = {
    /**
     * The unique identifier of the custody commission
     */
    id: string;
    /**
     * The unique identifier for this commission
     */
    identifier: string;
    /**
     * List of registered consumer IDs
     */
    registeredConsumers: Array<string>;
    /**
     * When the custody commission was created
     */
    createdAt: string;
    /**
     * When the custody commission was last updated
     */
    updatedAt: string;
};

export type ConsumeCustodyCommission = {
    /**
     * The identifier of the custody commission to consume
     */
    identifier: string;
    /**
     * The ID of the consumer consuming the commission
     */
    consumedBy: string;
};

export type CreateDid = {
    /**
     * The name of the DID.
     */
    name: string;
};

export type Did = {
    /**
     * Unique identifier of the DID.
     */
    id: string;
    /**
     * The DID.
     */
    did: string;
    /**
     * The DID alias.
     */
    alias: string;
    /**
     * The name given to the DID.
     */
    name: string;
};

export type PaginatedDids = {
    /**
     * The list of DIDs
     */
    items: Array<Did>;
    /**
     * The pagination metadata
     */
    metadata: Paginated;
};

export type TrustGraphNodeType = 'DTE' | 'DCC' | 'DPP' | 'DIA' | 'DFR';

export type TrustGraphNode = {
    /**
     * The id of the trust graph node
     */
    id: string;
    /**
     * The hash of the trust graph node
     */
    hash: string;
    /**
     * The raw data of the trust graph node
     */
    raw: {
        [key: string]: unknown;
    };
    /**
     * The type of the trust graph node
     */
    type: TrustGraphNodeType;
};

export type TrustGraphEdge = {
    /**
     * The source of the trust graph edge
     */
    source: string;
    /**
     * The target of the trust graph edge
     */
    target: string;
};

export type PolicyResultStatus = 'PENDING' | 'SUCCESS' | 'FAILURE';

export type PolicyResult = {
    /**
     * The id of the policy result
     */
    id: string;
    /**
     * The updated at date of the policy result
     */
    updatedAt: string;
    /**
     * The created at date of the policy result
     */
    createdAt: string;
    /**
     * The status of the policy result
     */
    status: PolicyResultStatus;
    /**
     * The name of the policy
     */
    policyName: string;
    /**
     * The description of the policy
     */
    policyDescription?: string;
    /**
     * The constraints that were evaluated
     */
    constraints: Array<string>;
};

export type Policy = {
    /**
     * The id of the policy
     */
    id: string;
    /**
     * The updated at date of the policy result
     */
    updatedAt: string;
    /**
     * The created at date of the policy result
     */
    createdAt: string;
    /**
     * The name of the policy
     */
    name: string;
    /**
     * The description of the policy
     */
    description: string;
    /**
     * The constraints of the policy
     */
    constraints: Array<string>;
};

export type TrustGraph = {
    /**
     * The id of the trust graph
     */
    id: string;
    /**
     * The hash of the trust graph
     */
    hash: string;
    /**
     * The nodes of the trust graph
     */
    nodes: Array<TrustGraphNode>;
    /**
     * The edges of the trust graph
     */
    edges: Array<TrustGraphEdge>;
    /**
     * The type of the trust graph
     */
    type: TrustGraphNodeType;
    /**
     * The policy results of the trust graph
     */
    policyResults: Array<PolicyResult>;
    /**
     * The policies applied to the trust graph
     */
    policies: Array<Policy>;
};

export type TraverseTrustGraph = {
    /**
     * The target identifier to traverse from.
     */
    identifier: string;
    /**
     * The policies to evaluate
     */
    policies?: Array<string>;
};

export type CreateDppDto = {
    /**
     * The id of the credential issuer profile in UUID format
     */
    credentialIssuerProfileId: string;
    /**
     * The valid from date of the DPP in ISO 8601 format
     */
    validFrom: string;
    /**
     * The valid to date of the DPP in ISO 8601 format
     */
    validUntil: string;
    /**
     * The version of the DPP, by default the latest published version will be used.
     */
    version: string;
    /**
     * The credential subject of the DPP
     */
    credentialSubject: {
        [key: string]: unknown;
    };
};

export type Dpp = {
    /**
     * The id of the DPP in UUID format
     */
    id: string;
};

export type CreateProvenanceForm = {
    [key: string]: unknown;
};

export type ProvenanceForm = {
    [key: string]: unknown;
};

export type UpdateProvenanceForm = {
    [key: string]: unknown;
};

export type CreateEventExtensionSchema = {
    /**
     * The JSON schema definition
     */
    schema: {
        [key: string]: unknown;
    };
};

export type CreateIlmdSchemaDto = {
    /**
     * The JSON schema definition
     */
    schema: {
        [key: string]: unknown;
    };
};

export type CreateEventSchema = {
    /**
     * The code of the event tag, a unique identifier
     */
    code: string;
    /**
     * The name of the event tag
     */
    name?: string;
    /**
     * The description of the event tag
     */
    description?: string;
    /**
     * Schema of the event extension associated with this event schema.
     */
    extensionSchema?: CreateEventExtensionSchema;
    /**
     * The structured schema for a new version, stored in SchemaDefinition
     */
    ilmdSchema?: CreateIlmdSchemaDto;
};

export type EventExtensionSchema = {
    /**
     * The unique identifier of the schema
     */
    id: string;
    /**
     * The JSON schema definition
     */
    schema: {
        [key: string]: unknown;
    };
    /**
     * The creation timestamp
     */
    createdAt: string;
};

/**
 * The schema of an ILMD
 */
export type IlmdSchema = {
    /**
     * The unique identifier of the ILMD schema
     */
    id: string;
    /**
     * The JSON schema definition
     */
    schema: {
        [key: string]: unknown;
    };
    /**
     * The creation timestamp
     */
    createdAt: string;
};

export type EventSchema = {
    /**
     * The id of the event tag
     */
    id: string;
    /**
     * The code of the event tag, a unique identifier
     */
    code: string;
    /**
     * The name of the event tag
     */
    name: string;
    /**
     * The description of the event tag
     */
    description: string;
    /**
     * The schema definition for custom fields
     */
    extensionSchema?: Array<EventExtensionSchema>;
    /**
     * The ilmd schema definition for custom fields
     */
    ilmdSchema?: IlmdSchema;
    /**
     * The date and time the event tag was created
     */
    createdAt: string;
    /**
     * The date and time the event tag was updated
     */
    updatedAt: string;
    /**
     * Whether the event tag is deleted
     */
    deleted: boolean;
    /**
     * The date and time the event tag was deleted
     */
    deletedAt: string;
};

export type CreateInstanceIdentifier = {
    /**
     * The EPC class of the quantity element
     */
    epc?: string;
    /**
     * The trade item of the quantity element
     */
    tradeItem?: string;
};

export type CreateQuantityElement = {
    /**
     * The EPC class of the quantity element
     */
    epcClass?: string;
    /**
     * The trade item of the quantity element. This will create an incrementing batch number.
     */
    tradeItem?: string;
    /**
     * Whether the quantity element is a class reference, if false, a lot number is assigned.
     */
    classReference?: boolean;
    /**
     * The quantity of the item
     */
    quantity: number;
    /**
     * The unit of measurement for the quantity
     */
    unit?: string;
};

export type Source = {
    /**
     * The type of source
     */
    sourceType: 'OWNING_PARTY' | 'POSSESSING_PARTY' | 'LOCATION' | 'LOGISTICS_PROVIDER';
    /**
     * The source string
     */
    source?: string;
    /**
     * The partner id
     */
    partner?: string;
};

export type Destination = {
    /**
     * The type of destination
     */
    destinationType: 'OWNING_PARTY' | 'POSSESSING_PARTY' | 'LOCATION' | 'LOGISTICS_PROVIDER';
    /**
     * The destination string
     */
    destination?: string;
    /**
     * The partner id
     */
    partner?: string;
};

export type CreateReadPoint = {
    /**
     * The identifier of the read point
     */
    identifier?: string;
    /**
     * The latitude of the location.
     */
    lat?: number;
    /**
     * The longitude of the location.
     */
    lng?: number;
};

export type SeafoodElements = {
    /**
     * The catch area of the seafood event data
     */
    catchArea: string;
};

export type CreateEvent = {
    /**
     * The time of the event
     */
    eventTime: string;
    /**
     * The type of the event
     */
    eventType: 'ASSOCIATION_EVENT' | 'OBJECT_EVENT' | 'AGGREGATION_EVENT' | 'TRANSACTION_EVENT' | 'TRANSFORMATION_EVENT';
    /**
     * The ACTION of the event.
     */
    action: 'OBSERVE' | 'ADD' | 'DELETE';
    /**
     * The tag associated with the event
     */
    eventTag?: string;
    /**
     * The business step associated with the event
     */
    bizStep?: 'ACCEPTING' | 'ARRIVING' | 'ASSEMBLING' | 'COLLECTING' | 'COMMISSIONING' | 'CONSIGNING' | 'CREATING_CLASS_INSTANCE' | 'CYCLE_COUNTING' | 'DECOMMISSIONING' | 'DEPARTING' | 'DESTROYING' | 'DISASSEMBLING' | 'DISPENSING' | 'ENCODING' | 'ENTERING_EXITING' | 'HOLDING' | 'INSPECTING' | 'INSTALLING' | 'KILLING' | 'LOADING' | 'OTHER' | 'PACKING' | 'PICKING' | 'RECEIVING' | 'REMOVING' | 'REPACKAGING' | 'REPAIRING' | 'REPLACING' | 'RESERVING' | 'RETAIL_SELLING' | 'SHIPPING' | 'STAGING_OUTBOUND' | 'STOCK_TAKING' | 'STOCKING' | 'STORING' | 'TRANSPORTING' | 'UNLOADING' | 'UNPACKING' | 'VOID_SHIPPING' | 'SENSOR_REPORTING' | 'SAMPLING';
    /**
     * The disposition of the event
     */
    disposition?: 'ACTIVE' | 'CONTAINER_CLOSED' | 'DAMAGED' | 'DESTROYED' | 'DISPENSED' | 'DISPOSED' | 'ENCODED' | 'EXPIRED' | 'IN_PROGRESS' | 'IN_TRANSIT' | 'INACTIVE' | 'NO_PEDIGREE_MATCH' | 'NON_SELLABLE_OTHER' | 'PARTIALLY_DISPENSED' | 'RECALLED' | 'RESERVED' | 'RETAIL_SOLD' | 'RETURNED' | 'SELLABLE_ACCESSIBLE' | 'SELLABLE_NOT_ACCESSIBLE' | 'STOLEN' | 'UNKNOWN' | 'AVAILABLE' | 'COMPLETENESS_VERIFIED' | 'COMPLETENESS_INFERRED' | 'CONFORMANT' | 'CONTAINER_OPEN' | 'MISMATCH_INSTANCE' | 'MISMATCH_CLASS' | 'MISMATCH_QUANTITY' | 'NEEDS_REPLACEMENT' | 'NON_CONFORMANT' | 'UNAVAILABLE';
    /**
     * List of EPCs associated with the event
     */
    epcs?: Array<CreateInstanceIdentifier>;
    /**
     * List of input EPCs associated with the event
     */
    inputEpcs?: Array<CreateInstanceIdentifier>;
    /**
     * List of output EPCs associated with the event
     */
    outputEpcs?: Array<CreateInstanceIdentifier>;
    /**
     * List of quantities associated with the event
     */
    quantityList?: Array<CreateQuantityElement>;
    /**
     * Output ist of quantities associated with the event
     */
    outputQuantityList?: Array<CreateQuantityElement>;
    /**
     * Input list of quantities associated with the event
     */
    inputQuantityList?: Array<CreateQuantityElement>;
    /**
     * List of sources associated with the event
     */
    sourceList?: Array<Source>;
    /**
     * List of destinations associated with the event
     */
    destinationList?: Array<Destination>;
    /**
     * The read point associated with the event
     */
    readPoint?: CreateReadPoint;
    /**
     * The seafood event data associated with the event
     */
    seafood?: SeafoodElements;
    /**
     * List of images associated with the event
     */
    images?: Array<string>;
    /**
     * The extension of the event
     */
    extension?: {
        [key: string]: unknown;
    };
    /**
     * The ILMD of the event
     */
    ilmd?: {
        [key: string]: unknown;
    };
};

export type QuantityElement = {
    /**
     * The EPC class of the quantity element
     */
    epcClass: string;
    /**
     * The quantity of the item
     */
    quantity: number;
    /**
     * The unit of measurement for the quantity
     */
    unit: string;
};

export type ReadPoint = {
    /**
     * The identifier of the read point
     */
    identifier?: string;
    /**
     * The latitude of the read point
     */
    lat?: number;
    /**
     * The longitude of the read point
     */
    lng?: number;
};

export type InstanceIdentifierDto = {
    /**
     * The instance identifier
     */
    epc: string;
};

export type EventIlmd = {
    /**
     * The schema associated with the ILMD
     */
    schema: {
        [key: string]: unknown;
    };
    /**
     * The ILMD associated with the event
     */
    value: {
        [key: string]: unknown;
    };
};

export type Event = {
    /**
     * The id of the event
     */
    id: string;
    /**
     * The time of the event was created
     */
    createdAt: string;
    /**
     * The user id of the event
     */
    userId?: string;
    /**
     * The time of the event
     */
    eventTime: string;
    /**
     * The type of the event
     */
    eventType: 'ASSOCIATION_EVENT' | 'OBJECT_EVENT' | 'AGGREGATION_EVENT' | 'TRANSACTION_EVENT' | 'TRANSFORMATION_EVENT';
    /**
     * The action of the event
     */
    action: 'OBSERVE' | 'ADD' | 'DELETE';
    /**
     * The schema associated with the event
     */
    schema?: EventSchema;
    /**
     * The business step associated with the event
     */
    bizStep?: 'ACCEPTING' | 'ARRIVING' | 'ASSEMBLING' | 'COLLECTING' | 'COMMISSIONING' | 'CONSIGNING' | 'CREATING_CLASS_INSTANCE' | 'CYCLE_COUNTING' | 'DECOMMISSIONING' | 'DEPARTING' | 'DESTROYING' | 'DISASSEMBLING' | 'DISPENSING' | 'ENCODING' | 'ENTERING_EXITING' | 'HOLDING' | 'INSPECTING' | 'INSTALLING' | 'KILLING' | 'LOADING' | 'OTHER' | 'PACKING' | 'PICKING' | 'RECEIVING' | 'REMOVING' | 'REPACKAGING' | 'REPAIRING' | 'REPLACING' | 'RESERVING' | 'RETAIL_SELLING' | 'SHIPPING' | 'STAGING_OUTBOUND' | 'STOCK_TAKING' | 'STOCKING' | 'STORING' | 'TRANSPORTING' | 'UNLOADING' | 'UNPACKING' | 'VOID_SHIPPING' | 'SENSOR_REPORTING' | 'SAMPLING';
    /**
     * The disposition of the event
     */
    disposition?: 'ACTIVE' | 'CONTAINER_CLOSED' | 'DAMAGED' | 'DESTROYED' | 'DISPENSED' | 'DISPOSED' | 'ENCODED' | 'EXPIRED' | 'IN_PROGRESS' | 'IN_TRANSIT' | 'INACTIVE' | 'NO_PEDIGREE_MATCH' | 'NON_SELLABLE_OTHER' | 'PARTIALLY_DISPENSED' | 'RECALLED' | 'RESERVED' | 'RETAIL_SOLD' | 'RETURNED' | 'SELLABLE_ACCESSIBLE' | 'SELLABLE_NOT_ACCESSIBLE' | 'STOLEN' | 'UNKNOWN' | 'AVAILABLE' | 'COMPLETENESS_VERIFIED' | 'COMPLETENESS_INFERRED' | 'CONFORMANT' | 'CONTAINER_OPEN' | 'MISMATCH_INSTANCE' | 'MISMATCH_CLASS' | 'MISMATCH_QUANTITY' | 'NEEDS_REPLACEMENT' | 'NON_CONFORMANT' | 'UNAVAILABLE';
    /**
     * List of quantities associated with the event
     */
    quantityList?: Array<QuantityElement>;
    /**
     * Output list of quantities associated with the event
     */
    outputQuantityList?: Array<QuantityElement>;
    /**
     * Input list of quantities associated with the event
     */
    inputQuantityList?: Array<QuantityElement>;
    /**
     * List of sources associated with the event
     */
    sourceList?: Array<Source>;
    /**
     * List of destinations associated with the event
     */
    destinationList?: Array<Destination>;
    /**
     * The read point associated with the event
     */
    readPoint?: ReadPoint;
    /**
     * The instance identifiers associated with the event
     */
    epcs?: Array<InstanceIdentifierDto>;
    /**
     * The instance identifiers associated with the event
     */
    inputEpcs?: Array<InstanceIdentifierDto>;
    /**
     * The instance identifiers associated with the event
     */
    outputEpcs?: Array<InstanceIdentifierDto>;
    /**
     * The images associated with the event
     */
    images?: Array<string>;
    /**
     * The extension associated with the event
     */
    extension?: {
        [key: string]: unknown;
    };
    /**
     * The ILMD associated with the event
     */
    ilmd?: EventIlmd;
    /**
     * The seafood elements associated with the event
     */
    seafood?: SeafoodElements;
};

export type CreateLocation = {
    /**
     * The name of the location
     */
    name: string;
    /**
     * The id of the parent location
     */
    parentLocationId?: string | null;
    /**
     * The tag associated with the location
     */
    locationTag?: string;
};

export type LocationTag = {
    /**
     * The id of the location tag
     */
    id: string;
    /**
     * The code of the location tag, a unique identifier
     */
    code: string;
    /**
     * The name of the location tag
     */
    name: string;
    /**
     * The description of the location tag
     */
    description: string;
    /**
     * The date and time the location tag was created
     */
    createdAt: string;
    /**
     * The date and time the location tag was updated
     */
    updatedAt: string;
    /**
     * Whether the location tag is deleted
     */
    deleted: boolean;
    /**
     * The date and time the location tag was deleted
     */
    deletedAt: string;
};

export type Location = {
    /**
     * The id of the location
     */
    id: string;
    /**
     * The identifier of the location
     */
    identifier: string;
    /**
     * The reference number of the location
     */
    referenceNumber: number;
    /**
     * The name of the location
     */
    name: string;
    /**
     * The id of the parent location
     */
    parentLocationId?: string | null;
    /**
     * The tag associated with the location
     */
    locationTag?: LocationTag;
};

export type InstanceLevelInventory = {
    /**
     * The id of the trade item
     */
    tradeItemId: string;
    /**
     * The count of the trade item
     */
    count: number;
};

export type LotLevelInventory = {
    /**
     * The id of the trade item
     */
    tradeItemId: string;
    /**
     * The quantity of the trade item
     */
    quantity: number;
    /**
     * The unit of the trade item quantity
     */
    unit: 'KG' | 'EA' | 'L';
};

export type LocationInventory = {
    /**
     * The id of the location
     */
    id: string;
    /**
     * The date and time to derive the inventory at
     */
    dateTime: string;
    /**
     * The instance level inventory of the location
     */
    instances: Array<InstanceLevelInventory>;
    /**
     * The lot level inventory of the location
     */
    lots: Array<LotLevelInventory>;
};

export type CreateLocationTag = {
    /**
     * The code of the location tag, a unique identifier
     */
    code: string;
    /**
     * The name of the location tag
     */
    name: string;
    /**
     * The description of the location tag
     */
    description: string;
};

export type CreatePartner = {
    /**
     * The name of the partner
     */
    name: string;
    /**
     * The tag associated with the partner
     */
    partnerTag?: string;
    /**
     * The email of the partner
     */
    email?: string;
    /**
     * The first name of the partner
     */
    firstName?: string;
    /**
     * The middle name of the partner
     */
    middleName?: string;
    /**
     * The last name of the partner
     */
    lastName?: string;
    /**
     * The contact number of the partner
     */
    contactNumber?: string;
    /**
     * The address of the partner
     */
    streetAddressOne?: string;
    /**
     * The city of the partner
     */
    city?: string;
    /**
     * The state of the partner
     */
    stateOrRegion?: string;
};

export type PartnerTag = {
    /**
     * The id of the partner tag
     */
    id: string;
    /**
     * The code of the partner tag, a unique identifier
     */
    code: string;
    /**
     * The name of the partner tag
     */
    name: string;
    /**
     * The description of the partner tag
     */
    description: string;
    /**
     * The date and time the partner tag was created
     */
    createdAt: string;
    /**
     * The date and time the partner tag was updated
     */
    updatedAt: string;
    /**
     * Whether the partner tag is deleted
     */
    deleted: boolean;
    /**
     * The date and time the partner tag was deleted
     */
    deletedAt: string;
};

export type Partner = {
    /**
     * The id of the partner
     */
    id: string;
    /**
     * The tag associated with the partner
     */
    partnerTag?: PartnerTag;
    /**
     * The name of the partner
     */
    name: string;
    /**
     * The email of the partner
     */
    email?: string;
    /**
     * The first name of the partner
     */
    firstName?: string;
    /**
     * The middle name of the partner
     */
    middleName?: string;
    /**
     * The last name of the partner
     */
    lastName?: string;
    /**
     * The contact number of the partner
     */
    contactNumber?: string;
    /**
     * The address of the partner
     */
    streetAddressOne?: string;
    /**
     * The city of the partner
     */
    city?: string;
    /**
     * The state of the partner
     */
    stateOrRegion?: string;
};

export type UpdatePartner = {
    /**
     * The name of the partner
     */
    name?: string;
    /**
     * The email of the partner
     */
    email?: string;
    /**
     * The first name of the partner
     */
    firstName?: string;
    /**
     * The middle name of the partner
     */
    middleName?: string;
    /**
     * The last name of the partner
     */
    lastName?: string;
    /**
     * The contact number of the partner
     */
    contactNumber?: string;
    /**
     * The address of the partner
     */
    streetAddressOne?: string;
    /**
     * The city of the partner
     */
    city?: string;
    /**
     * The state of the partner
     */
    stateOrRegion?: string;
};

export type CreatePartnerTag = {
    /**
     * The code of the partner tag, a unique identifier
     */
    code: string;
    /**
     * The name of the partner tag
     */
    name: string;
    /**
     * The description of the partner tag
     */
    description: string;
};

export type CreateTradeItem = {
    /**
     * The name of the trade item
     */
    name: string;
    /**
     * The tag associated with the trade item
     */
    tradeItemTag?: string;
};

export type TradeItemTag = {
    /**
     * The id of the trade item tag
     */
    id: string;
    /**
     * The code of the trade item tag, a unique identifier
     */
    code: string;
    /**
     * The name of the trade item tag
     */
    name: string;
    /**
     * The description of the trade item tag
     */
    description: string;
    /**
     * The date and time the trade item tag was created
     */
    createdAt: string;
    /**
     * The date and time the trade item tag was updated
     */
    updatedAt: string;
    /**
     * Whether the trade item tag is deleted
     */
    deleted: boolean;
    /**
     * The date and time the trade item tag was deleted
     */
    deletedAt: string;
};

export type TradeItem = {
    /**
     * The id of the trade item
     */
    id: string;
    /**
     * The name of the trade item
     */
    name: string;
    /**
     * The tag associated with the trade item
     */
    tradeItemTag?: TradeItemTag;
};

export type CreateTradeItemTag = {
    /**
     * The code of the trade item tag, a unique identifier
     */
    code: string;
    /**
     * The name of the trade item tag
     */
    name: string;
    /**
     * The description of the trade item tag
     */
    description: string;
};

export type CreateOrganization = {
    /**
     * Name given to the organization.
     */
    name: string;
    /**
     * Unique prefix for the organization that will be used in subdomains (e.g., prefix.trustlink.dev).
     */
    prefix: string;
};

export type Organization = {
    /**
     * Unique identifier of the organization.
     */
    id: string;
    /**
     * Name given to the organization.
     */
    name: string;
};

export type UpdateOrganization = {
    /**
     * Name given to the organization.
     */
    name: string;
};

export type ScreenHeader = {
    /**
     * The title of the screen
     */
    title: string;
    /**
     * The subtitle of the screen
     */
    subtitle: string;
    /**
     * The size of the screen
     */
    size: 'small' | 'medium' | 'large';
};

export type TrustGraphScreen = {
    /**
     * The trust graph
     */
    trustGraph: TrustGraph;
    /**
     * The header of the screen
     */
    header: ScreenHeader;
};

export type CreateSchema = {
    /**
     * The name of the schema
     */
    name: string;
    /**
     * The schema
     */
    schema: {
        [key: string]: unknown;
    };
};

export type Schema = {
    /**
     * The id of the schema
     */
    id: string;
    /**
     * The name of the schema
     */
    name: string;
    /**
     * The schema
     */
    schema: {
        [key: string]: unknown;
    };
};

export type UpdateSchema = {
    /**
     * The id of the schema
     */
    id: string;
    /**
     * The name of the schema
     */
    name: string;
    /**
     * The schema
     */
    schema: {
        [key: string]: unknown;
    };
};

export type HealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/status';
};

export type HealthCheckResponses = {
    200: unknown;
};

export type GetTenantUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/tenant-users';
};

export type GetTenantUsersErrors = {
    /**
     * Unauthorized access
     */
    401: unknown;
};

export type GetTenantUsersResponses = {
    /**
     * The tenant users have been successfully retrieved
     */
    200: Array<TenantUser>;
};

export type GetTenantUsersResponse = GetTenantUsersResponses[keyof GetTenantUsersResponses];

export type CreateTenantUserData = {
    body: CreateTenantUser;
    path?: never;
    query?: never;
    url: '/auth/tenant-users';
};

export type CreateTenantUserErrors = {
    /**
     * The tenant user could not be created
     */
    400: unknown;
    /**
     * The tenant user could not be found
     */
    404: unknown;
};

export type CreateTenantUserResponses = {
    /**
     * The tenant user has been successfully created
     */
    201: TenantUser;
};

export type CreateTenantUserResponse = CreateTenantUserResponses[keyof CreateTenantUserResponses];

export type DeleteTenantUserData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/auth/tenant-users/{id}';
};

export type DeleteTenantUserErrors = {
    /**
     * Unauthorized access
     */
    401: unknown;
    /**
     * The tenant user could not be found
     */
    404: unknown;
};

export type DeleteTenantUserResponses = {
    /**
     * The tenant user has been successfully deleted
     */
    200: unknown;
};

export type GetTenantUserByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/auth/tenant-users/{id}';
};

export type GetTenantUserByIdErrors = {
    /**
     * Unauthorized access
     */
    401: unknown;
    /**
     * The tenant user could not be found
     */
    404: unknown;
};

export type GetTenantUserByIdResponses = {
    /**
     * The tenant user has been successfully retrieved
     */
    200: TenantUser;
};

export type GetTenantUserByIdResponse = GetTenantUserByIdResponses[keyof GetTenantUserByIdResponses];

export type UpdateTenantUserData = {
    body: UpdateTenantUser;
    path: {
        id: string;
    };
    query?: never;
    url: '/auth/tenant-users/{id}';
};

export type UpdateTenantUserErrors = {
    /**
     * The tenant user could not be updated
     */
    400: unknown;
    /**
     * Unauthorized access
     */
    401: unknown;
    /**
     * The tenant user could not be found
     */
    404: unknown;
};

export type UpdateTenantUserResponses = {
    /**
     * The tenant user has been successfully updated
     */
    200: TenantUser;
};

export type UpdateTenantUserResponse = UpdateTenantUserResponses[keyof UpdateTenantUserResponses];

export type ClearSandboxData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sandbox/clear';
};

export type ClearSandboxResponses = {
    /**
     * The sandbox data has been successfully cleared
     */
    200: unknown;
};

export type MintBioLockData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/bio-locks/mint';
};

export type MintBioLockResponses = {
    201: unknown;
};

export type SetBioLockData = {
    body: CreateBioLock;
    path?: never;
    query?: never;
    url: '/bio-locks/set';
};

export type SetBioLockErrors = {
    /**
     * The BioLock could not be created
     */
    400: unknown;
    /**
     * The BioLock could not be found
     */
    404: unknown;
};

export type SetBioLockResponses = {
    /**
     * The BioLock has been successfully created
     */
    201: BioLock;
};

export type SetBioLockResponse = SetBioLockResponses[keyof SetBioLockResponses];

export type GetBioLockData = {
    body?: never;
    path: {
        /**
         * The id of the Bio Lock
         */
        id: string;
    };
    query?: never;
    url: '/bio-locks/{id}';
};

export type GetBioLockResponses = {
    200: unknown;
};

export type GetThemesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/themes';
};

export type GetThemesResponses = {
    /**
     * The themes that were found
     */
    200: Array<Theme>;
};

export type GetThemesResponse = GetThemesResponses[keyof GetThemesResponses];

export type CreateThemeData = {
    body: CreateTheme;
    path?: never;
    query?: never;
    url: '/themes';
};

export type CreateThemeResponses = {
    /**
     * The theme that was created
     */
    200: Theme;
};

export type CreateThemeResponse = CreateThemeResponses[keyof CreateThemeResponses];

export type DeleteThemeData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/themes/{id}';
};

export type DeleteThemeResponses = {
    200: unknown;
};

export type GetThemeData = {
    body?: never;
    path: {
        /**
         * The ID of the theme to find
         */
        id: string;
    };
    query?: never;
    url: '/themes/{id}';
};

export type GetThemeResponses = {
    /**
     * The theme that was found
     */
    200: Theme;
};

export type GetThemeResponse = GetThemeResponses[keyof GetThemeResponses];

export type UpdateThemeData = {
    body: UpdateTheme;
    path: {
        /**
         * The ID of the theme to update
         */
        id: string;
    };
    query?: never;
    url: '/themes/{id}';
};

export type UpdateThemeResponses = {
    /**
     * The theme that was updated
     */
    200: Theme;
};

export type UpdateThemeResponse = UpdateThemeResponses[keyof UpdateThemeResponses];

export type GetOrganizationThemeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/organization-themes';
};

export type GetOrganizationThemeResponses = {
    /**
     * The organization theme that was found
     */
    200: OrganizationTheme;
};

export type GetOrganizationThemeResponse = GetOrganizationThemeResponses[keyof GetOrganizationThemeResponses];

export type CreateOrganizationThemeData = {
    body: CreateOrganizationTheme;
    path?: never;
    query?: never;
    url: '/organization-themes';
};

export type CreateOrganizationThemeResponses = {
    /**
     * The organization theme that was created
     */
    200: OrganizationTheme;
};

export type CreateOrganizationThemeResponse = CreateOrganizationThemeResponses[keyof CreateOrganizationThemeResponses];

export type CreateUploadUrlData = {
    body: S3UploadObject;
    path?: never;
    query?: never;
    url: '/s3/upload-url';
};

export type CreateUploadUrlResponses = {
    /**
     * Returns a presigned URL and S3 object ID for uploading a file
     */
    201: S3UploadResponse;
};

export type CreateUploadUrlResponse = CreateUploadUrlResponses[keyof CreateUploadUrlResponses];

export type GetObjectData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/s3/object/{id}';
};

export type GetObjectResponses = {
    /**
     * Returns a S3 object by its ID
     */
    200: S3Object;
};

export type GetObjectResponse = GetObjectResponses[keyof GetObjectResponses];

export type GetLinksData = {
    body?: never;
    path?: never;
    query: {
        offset: number;
        limit: number;
    };
    url: '/links';
};

export type GetLinksResponses = {
    /**
     * The Links were found and returned.
     */
    200: Array<LinkConfiguration>;
};

export type GetLinksResponse = GetLinksResponses[keyof GetLinksResponses];

export type CreateLinkData = {
    body: CreateLink;
    path?: never;
    query?: never;
    url: '/links';
};

export type CreateLinkResponses = {
    /**
     * The Link was created successfully.
     */
    201: LinkConfiguration;
};

export type CreateLinkResponse = CreateLinkResponses[keyof CreateLinkResponses];

export type DeleteLinkData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/links/{id}';
};

export type DeleteLinkResponses = {
    /**
     * The Link was deleted successfully.
     */
    200: unknown;
};

export type GetLinkData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/links/{id}';
};

export type GetLinkResponses = {
    /**
     * The Link was found and returned.
     */
    200: LinkConfiguration;
};

export type GetLinkResponse = GetLinkResponses[keyof GetLinkResponses];

export type LinkResolverControllerResolveData = {
    body?: never;
    path: {
        path: string;
    };
    query: {
        linkType: string;
    };
    url: '/link-resolver/{path}';
};

export type LinkResolverControllerResolveResponses = {
    200: unknown;
};

export type GetCanvasTemplateData = {
    body?: never;
    path: {
        /**
         * The ID of the Canvas Template to find
         */
        id: unknown;
    };
    query?: never;
    url: '/canvas-templates/{id}';
};

export type GetCanvasTemplateResponses = {
    /**
     * The Canvas Template was successfully obtained.
     */
    200: CanvasTemplate;
};

export type GetCanvasTemplateResponse = GetCanvasTemplateResponses[keyof GetCanvasTemplateResponses];

export type CreateCanvasTemplateData = {
    body: CreateCanvasTemplate;
    path?: never;
    query?: never;
    url: '/canvas-templates';
};

export type CreateCanvasTemplateResponses = {
    /**
     * The Canvas Template that was created.
     */
    200: CanvasTemplate;
};

export type CreateCanvasTemplateResponse = CreateCanvasTemplateResponses[keyof CreateCanvasTemplateResponses];

export type RenderCanvasTemplateData = {
    body: {
        [key: string]: string | number | boolean | {
            [key: string]: unknown;
        } | Array<unknown>;
    };
    path: {
        /**
         * The ID of the Canvas Template to render
         */
        id: string;
    };
    query?: never;
    url: '/canvas-templates/{id}/render';
};

export type RenderCanvasTemplateResponses = {
    /**
     * Instantiation of the Canvas Template as a Canvas Template Instance
     */
    200: CanvasTemplateInstance;
};

export type RenderCanvasTemplateResponse = RenderCanvasTemplateResponses[keyof RenderCanvasTemplateResponses];

export type GetCredentialIssuerProfilesData = {
    body?: never;
    path?: never;
    query: {
        page: number;
        limit: number;
    };
    url: '/credential-issuer-profiles';
};

export type GetCredentialIssuerProfilesResponses = {
    /**
     * Credential issuer profiles fetched successfully
     */
    200: PaginatedCredentialIssuerProfiles;
};

export type GetCredentialIssuerProfilesResponse = GetCredentialIssuerProfilesResponses[keyof GetCredentialIssuerProfilesResponses];

export type CreateCredentialIssuerProfileData = {
    body: CreateCredentialIssuerProfile;
    path?: never;
    query?: never;
    url: '/credential-issuer-profiles';
};

export type CreateCredentialIssuerProfileErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type CreateCredentialIssuerProfileResponses = {
    /**
     * Credential issuer profile created successfully
     */
    201: CredentialIssuerProfile;
};

export type CreateCredentialIssuerProfileResponse = CreateCredentialIssuerProfileResponses[keyof CreateCredentialIssuerProfileResponses];

export type DeleteCredentialIssuerProfileData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/credential-issuer-profiles/{id}';
};

export type DeleteCredentialIssuerProfileResponses = {
    /**
     * Credential issuer profile deleted successfully
     */
    204: void;
};

export type DeleteCredentialIssuerProfileResponse = DeleteCredentialIssuerProfileResponses[keyof DeleteCredentialIssuerProfileResponses];

export type GetCredentialIssuerProfileData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/credential-issuer-profiles/{id}';
};

export type GetCredentialIssuerProfileErrors = {
    /**
     * Credential issuer profile not found
     */
    403: unknown;
};

export type GetCredentialIssuerProfileResponses = {
    /**
     * Credential issuer profile fetched successfully
     */
    200: CredentialIssuerProfile;
};

export type GetCredentialIssuerProfileResponse = GetCredentialIssuerProfileResponses[keyof GetCredentialIssuerProfileResponses];

export type GetCredentialData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/credentials/{id}';
};

export type GetCredentialResponses = {
    200: unknown;
};

export type IssueCredentialData = {
    body: IssueCredentialRequest;
    path?: never;
    query?: never;
    url: '/credentials/issue';
};

export type IssueCredentialErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type IssueCredentialResponses = {
    /**
     * Credential successfully issued!
     */
    201: IssueCredentialResponse;
};

export type IssueCredentialResponse2 = IssueCredentialResponses[keyof IssueCredentialResponses];

export type VerifyCredentialData = {
    body: VerifyCredentialRequest;
    path?: never;
    query?: never;
    url: '/credentials/verify';
};

export type VerifyCredentialErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type VerifyCredentialResponses = {
    /**
     * Verifiable Credential successfully verified!
     */
    200: VerifyCredentialResponse;
};

export type VerifyCredentialResponse2 = VerifyCredentialResponses[keyof VerifyCredentialResponses];

export type GetCustodyCommissionsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/custody-commissions';
};

export type GetCustodyCommissionsResponses = {
    /**
     * The custody commissions have been successfully retrieved
     */
    200: Array<CustodyCommission>;
};

export type GetCustodyCommissionsResponse = GetCustodyCommissionsResponses[keyof GetCustodyCommissionsResponses];

export type CreateCustodyCommissionData = {
    body: CreateCustodyCommission;
    path?: never;
    query?: never;
    url: '/custody-commissions';
};

export type CreateCustodyCommissionErrors = {
    /**
     * The custody commission could not be created
     */
    400: unknown;
};

export type CreateCustodyCommissionResponses = {
    /**
     * The custody commission has been successfully created
     */
    201: CustodyCommission;
};

export type CreateCustodyCommissionResponse = CreateCustodyCommissionResponses[keyof CreateCustodyCommissionResponses];

export type DeleteCustodyCommissionData = {
    body?: never;
    path: {
        /**
         * The ID of the custody commission to delete
         */
        id: string;
    };
    query?: never;
    url: '/custody-commissions/{id}';
};

export type DeleteCustodyCommissionErrors = {
    /**
     * The custody commission could not be found
     */
    404: unknown;
};

export type DeleteCustodyCommissionResponses = {
    /**
     * The custody commission has been successfully deleted
     */
    204: void;
};

export type DeleteCustodyCommissionResponse = DeleteCustodyCommissionResponses[keyof DeleteCustodyCommissionResponses];

export type GetCustodyCommissionData = {
    body?: never;
    path: {
        /**
         * The ID of the custody commission to get
         */
        id: string;
    };
    query?: never;
    url: '/custody-commissions/{id}';
};

export type GetCustodyCommissionErrors = {
    /**
     * The custody commission could not be found
     */
    404: unknown;
};

export type GetCustodyCommissionResponses = {
    /**
     * The custody commission has been successfully retrieved
     */
    200: CustodyCommission;
};

export type GetCustodyCommissionResponse = GetCustodyCommissionResponses[keyof GetCustodyCommissionResponses];

export type UpdateCustodyCommissionData = {
    body?: never;
    path: {
        /**
         * The ID of the custody commission to update
         */
        id: string;
    };
    query?: never;
    url: '/custody-commissions/{id}';
};

export type UpdateCustodyCommissionErrors = {
    /**
     * The custody commission could not be found
     */
    404: unknown;
};

export type UpdateCustodyCommissionResponses = {
    /**
     * The custody commission has been successfully updated
     */
    200: CustodyCommission;
};

export type UpdateCustodyCommissionResponse = UpdateCustodyCommissionResponses[keyof UpdateCustodyCommissionResponses];

export type ConsumeCustodyCommissionData = {
    body: ConsumeCustodyCommission;
    path?: never;
    query?: never;
    url: '/custody-commissions/consume';
};

export type ConsumeCustodyCommissionErrors = {
    /**
     * The custody commission could not be found or has already been consumed
     */
    404: unknown;
};

export type ConsumeCustodyCommissionResponses = {
    /**
     * The custody commission has been successfully consumed
     */
    200: CustodyCommission;
};

export type ConsumeCustodyCommissionResponse = ConsumeCustodyCommissionResponses[keyof ConsumeCustodyCommissionResponses];

export type GetDidsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/did';
};

export type GetDidsResponses = {
    /**
     * DIDs fetched successfully
     */
    200: PaginatedDids;
};

export type GetDidsResponse = GetDidsResponses[keyof GetDidsResponses];

export type CreateDidData = {
    body: CreateDid;
    path?: never;
    query?: never;
    url: '/did';
};

export type CreateDidErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type CreateDidResponses = {
    /**
     * DID created successfully
     */
    201: Did;
};

export type CreateDidResponse = CreateDidResponses[keyof CreateDidResponses];

export type DeleteDidData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/did/{id}';
};

export type DeleteDidResponses = {
    /**
     * DID deleted successfully
     */
    204: void;
};

export type DeleteDidResponse = DeleteDidResponses[keyof DeleteDidResponses];

export type GetDidData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/did/{id}';
};

export type GetDidErrors = {
    /**
     * DID not found
     */
    403: unknown;
};

export type GetDidResponses = {
    /**
     * DID fetched successfully
     */
    200: Did;
};

export type GetDidResponse = GetDidResponses[keyof GetDidResponses];

export type GetTrustGraphData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/discovery/trust-graph/{id}';
};

export type GetTrustGraphErrors = {
    /**
     * The trust graph was not found
     */
    403: unknown;
};

export type GetTrustGraphResponses = {
    /**
     * The trust graph
     */
    200: TrustGraph;
};

export type GetTrustGraphResponse = GetTrustGraphResponses[keyof GetTrustGraphResponses];

export type TraverseTrustGraphData = {
    body: TraverseTrustGraph;
    path?: never;
    query?: never;
    url: '/discovery/trust-graph/traverse';
};

export type TraverseTrustGraphResponses = {
    /**
     * The trust graph traversed.
     */
    200: TrustGraph;
};

export type TraverseTrustGraphResponse = TraverseTrustGraphResponses[keyof TraverseTrustGraphResponses];

export type GetPolicyByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/policies/{id}';
};

export type GetPolicyByIdResponses = {
    /**
     * The policy was successfully retrieved.
     */
    200: Policy;
};

export type GetPolicyByIdResponse = GetPolicyByIdResponses[keyof GetPolicyByIdResponses];

export type GetPoliciesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
        /**
         * The ID of the parent location
         */
        parentLocationId?: string;
    };
    url: '/policies';
};

export type GetPoliciesResponses = {
    /**
     * The locations have been successfully retrieved
     */
    200: Array<Policy>;
};

export type GetPoliciesResponse = GetPoliciesResponses[keyof GetPoliciesResponses];

export type CreateDppData = {
    body: CreateDppDto;
    path?: never;
    query?: never;
    url: '/dpp';
};

export type CreateDppResponses = {
    /**
     * DPP created successfully
     */
    200: Dpp;
};

export type CreateDppResponse = CreateDppResponses[keyof CreateDppResponses];

export type DeleteDppData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/dpp/{id}';
};

export type DeleteDppResponses = {
    /**
     * DPP deleted successfully
     */
    200: unknown;
};

export type GetDppData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/dpp/{id}';
};

export type GetDppResponses = {
    /**
     * DPP retrieved successfully
     */
    200: Dpp;
};

export type GetDppResponse = GetDppResponses[keyof GetDppResponses];

export type GetProvenanceFormsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/provenance-forms';
};

export type GetProvenanceFormsResponses = {
    /**
     * The provenance forms have been successfully retrieved
     */
    200: Array<ProvenanceForm>;
};

export type GetProvenanceFormsResponse = GetProvenanceFormsResponses[keyof GetProvenanceFormsResponses];

export type CreateProvenanceFormData = {
    body: CreateProvenanceForm;
    path?: never;
    query?: never;
    url: '/provenance-forms';
};

export type CreateProvenanceFormResponses = {
    /**
     * The provenance form has been successfully created
     */
    201: ProvenanceForm;
};

export type CreateProvenanceFormResponse = CreateProvenanceFormResponses[keyof CreateProvenanceFormResponses];

export type DeleteProvenanceFormData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/provenance-forms/{id}';
};

export type DeleteProvenanceFormResponses = {
    /**
     * The provenance form has been successfully deleted
     */
    200: unknown;
};

export type GetProvenanceFormData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/provenance-forms/{id}';
};

export type GetProvenanceFormResponses = {
    /**
     * The provenance form has been successfully retrieved
     */
    200: ProvenanceForm;
};

export type GetProvenanceFormResponse = GetProvenanceFormResponses[keyof GetProvenanceFormResponses];

export type UpdateProvenanceFormData = {
    body: UpdateProvenanceForm;
    path: {
        id: string;
    };
    query?: never;
    url: '/provenance-forms/{id}';
};

export type UpdateProvenanceFormResponses = {
    /**
     * The provenance form has been successfully updated
     */
    200: ProvenanceForm;
};

export type UpdateProvenanceFormResponse = UpdateProvenanceFormResponses[keyof UpdateProvenanceFormResponses];

export type GetEventSchemasData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/event-schemas';
};

export type GetEventSchemasResponses = {
    /**
     * The event schemas have been successfully retrieved
     */
    200: Array<EventSchema>;
};

export type GetEventSchemasResponse = GetEventSchemasResponses[keyof GetEventSchemasResponses];

export type CreateEventSchemaData = {
    body: CreateEventSchema;
    path?: never;
    query?: never;
    url: '/event-schemas';
};

export type CreateEventSchemaErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type CreateEventSchemaResponses = {
    /**
     * Event schema created successfully
     */
    201: EventSchema;
};

export type CreateEventSchemaResponse = CreateEventSchemaResponses[keyof CreateEventSchemaResponses];

export type SetEventSchemasData = {
    /**
     * Array of event schemas to set
     */
    body: Array<CreateEventSchema>;
    path?: never;
    query?: never;
    url: '/event-schemas/set';
};

export type SetEventSchemasErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type SetEventSchemasResponses = {
    /**
     * Event schemas set successfully
     */
    200: Array<EventSchema>;
};

export type SetEventSchemasResponse = SetEventSchemasResponses[keyof SetEventSchemasResponses];

export type DeleteEventSchemaData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/event-schemas/{id}';
};

export type DeleteEventSchemaErrors = {
    /**
     * Event schema not found
     */
    404: unknown;
};

export type DeleteEventSchemaResponses = {
    /**
     * Event schema deleted successfully
     */
    200: unknown;
};

export type GetEventSchemaData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/event-schemas/{id}';
};

export type GetEventSchemaErrors = {
    /**
     * Event schema not found
     */
    404: unknown;
};

export type GetEventSchemaResponses = {
    /**
     * Event schema retrieved successfully
     */
    200: EventSchema;
};

export type GetEventSchemaResponse = GetEventSchemaResponses[keyof GetEventSchemaResponses];

export type CreateEventExtensionSchemaData = {
    body: CreateEventExtensionSchema;
    path: {
        id: string;
    };
    query?: never;
    url: '/event-schemas/{id}/extension-schemas';
};

export type CreateEventExtensionSchemaResponses = {
    201: unknown;
};

export type CreateIlmdSchemaData = {
    body: CreateIlmdSchemaDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/event-schemas/{id}/ilmd-schemas';
};

export type CreateIlmdSchemaResponses = {
    201: unknown;
};

export type GetEventsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/events';
};

export type GetEventsResponses = {
    /**
     * The events have been successfully retrieved
     */
    200: Array<Event>;
};

export type GetEventsResponse = GetEventsResponses[keyof GetEventsResponses];

export type CreateEventData = {
    body: CreateEvent;
    path?: never;
    query?: never;
    url: '/events';
};

export type CreateEventErrors = {
    /**
     * The location could not be created
     */
    400: unknown;
    /**
     * The parent location could not be found
     */
    404: unknown;
};

export type CreateEventResponses = {
    /**
     * The location has been successfully created
     */
    201: Event;
};

export type CreateEventResponse = CreateEventResponses[keyof CreateEventResponses];

export type DeleteEventData = {
    body?: never;
    path: {
        /**
         * The ID of the event to delete
         */
        id: string;
    };
    query?: never;
    url: '/events/{id}';
};

export type DeleteEventErrors = {
    /**
     * The event could not be found
     */
    404: unknown;
};

export type DeleteEventResponses = {
    /**
     * The event has been successfully deleted
     */
    200: unknown;
};

export type GetEventData = {
    body?: never;
    path: {
        /**
         * The ID of the event to get
         */
        id: string;
    };
    query?: never;
    url: '/events/{id}';
};

export type GetEventErrors = {
    /**
     * The event could not be found
     */
    404: unknown;
};

export type GetEventResponses = {
    /**
     * The event has been successfully retrieved
     */
    200: Event;
};

export type GetEventResponse = GetEventResponses[keyof GetEventResponses];

export type IdentifierControllerIlmdData = {
    body?: never;
    path: {
        /**
         * The id of the identifier
         */
        id: string;
    };
    query?: never;
    url: '/identifiers/{id}/ilmd';
};

export type IdentifierControllerIlmdResponses = {
    /**
     * The ILMD for the identifier
     */
    200: {
        [key: string]: string | number | boolean | {
            [key: string]: unknown;
        } | Array<unknown>;
    };
};

export type IdentifierControllerIlmdResponse = IdentifierControllerIlmdResponses[keyof IdentifierControllerIlmdResponses];

export type GetFaoCodesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/fao-codes';
};

export type GetFaoCodesResponses = {
    /**
     * All FAO codes
     */
    200: unknown;
};

export type GetLocationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
        /**
         * The ID of the parent location
         */
        parentLocationId?: string;
    };
    url: '/locations';
};

export type GetLocationsResponses = {
    /**
     * The locations have been successfully retrieved
     */
    200: Array<Location>;
};

export type GetLocationsResponse = GetLocationsResponses[keyof GetLocationsResponses];

export type CreateLocationData = {
    body: CreateLocation;
    path?: never;
    query?: never;
    url: '/locations';
};

export type CreateLocationErrors = {
    /**
     * The location could not be created
     */
    400: unknown;
    /**
     * The parent location could not be found
     */
    404: unknown;
};

export type CreateLocationResponses = {
    /**
     * The location has been successfully created
     */
    201: Location;
};

export type CreateLocationResponse = CreateLocationResponses[keyof CreateLocationResponses];

export type GetLocationData = {
    body?: never;
    path: {
        /**
         * The ID of the location to get
         */
        id: string;
    };
    query?: never;
    url: '/locations/{id}';
};

export type GetLocationErrors = {
    /**
     * The location could not be found
     */
    404: unknown;
};

export type GetLocationResponses = {
    /**
     * The location has been successfully retrieved
     */
    200: Location;
};

export type GetLocationResponse = GetLocationResponses[keyof GetLocationResponses];

export type GetLocationByIdentifierData = {
    body?: never;
    path: {
        /**
         * The identifier of the location
         */
        identifier: string;
    };
    query?: never;
    url: '/locations/by-identifier/{identifier}';
};

export type GetLocationByIdentifierErrors = {
    /**
     * The location could not be found
     */
    404: unknown;
};

export type GetLocationByIdentifierResponses = {
    /**
     * The location has been successfully retrieved
     */
    200: Location;
};

export type GetLocationByIdentifierResponse = GetLocationByIdentifierResponses[keyof GetLocationByIdentifierResponses];

export type GetLocationInventoryData = {
    body?: never;
    path: {
        /**
         * The ID of the location to get inventory for
         */
        id: string;
    };
    query?: never;
    url: '/locations/{id}/inventory';
};

export type GetLocationInventoryErrors = {
    /**
     * The location could not be found
     */
    404: unknown;
};

export type GetLocationInventoryResponses = {
    /**
     * The location inventory has been successfully retrieved
     */
    200: LocationInventory;
};

export type GetLocationInventoryResponse = GetLocationInventoryResponses[keyof GetLocationInventoryResponses];

export type GetLocationTagsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/location-tags';
};

export type GetLocationTagsResponses = {
    /**
     * The location tags have been successfully retrieved
     */
    200: Array<LocationTag>;
};

export type GetLocationTagsResponse = GetLocationTagsResponses[keyof GetLocationTagsResponses];

export type CreateLocationTagData = {
    body: CreateLocationTag;
    path?: never;
    query?: never;
    url: '/location-tags';
};

export type CreateLocationTagErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type CreateLocationTagResponses = {
    /**
     * Location tag created successfully
     */
    201: LocationTag;
};

export type CreateLocationTagResponse = CreateLocationTagResponses[keyof CreateLocationTagResponses];

export type SetLocationTagsData = {
    /**
     * Array of location tags to set
     */
    body: Array<CreateLocationTag>;
    path?: never;
    query?: never;
    url: '/location-tags/set';
};

export type SetLocationTagsErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type SetLocationTagsResponses = {
    /**
     * Location tags set successfully
     */
    200: Array<LocationTag>;
};

export type SetLocationTagsResponse = SetLocationTagsResponses[keyof SetLocationTagsResponses];

export type DeleteLocationTagData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/location-tags/{id}';
};

export type DeleteLocationTagErrors = {
    /**
     * Event tag not found
     */
    404: unknown;
};

export type DeleteLocationTagResponses = {
    /**
     * Location tag deleted successfully
     */
    200: unknown;
};

export type GetLocationTagData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/location-tags/{id}';
};

export type GetLocationTagErrors = {
    /**
     * Location tag not found
     */
    404: unknown;
};

export type GetLocationTagResponses = {
    /**
     * Location tag retrieved successfully
     */
    200: LocationTag;
};

export type GetLocationTagResponse = GetLocationTagResponses[keyof GetLocationTagResponses];

export type GetPartnersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/partners';
};

export type GetPartnersResponses = {
    /**
     * The partners have been successfully retrieved.
     */
    200: Array<Partner>;
};

export type GetPartnersResponse = GetPartnersResponses[keyof GetPartnersResponses];

export type CreatePartnerData = {
    body: CreatePartner;
    path?: never;
    query?: never;
    url: '/partners';
};

export type CreatePartnerErrors = {
    /**
     * The partner could not be created.
     */
    400: unknown;
};

export type CreatePartnerResponses = {
    /**
     * The partner has been successfully created.
     */
    201: Partner;
};

export type CreatePartnerResponse = CreatePartnerResponses[keyof CreatePartnerResponses];

export type DeletePartnerData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/partners/{id}';
};

export type DeletePartnerResponses = {
    /**
     * The partner has been successfully deleted.
     */
    200: unknown;
};

export type GetPartnerData = {
    body?: never;
    path: {
        /**
         * The ID of the partner to get
         */
        id: string;
    };
    query?: never;
    url: '/partners/{id}';
};

export type GetPartnerErrors = {
    /**
     * The partner could not be found.
     */
    404: unknown;
};

export type GetPartnerResponses = {
    /**
     * The partner has been successfully retrieved.
     */
    200: Partner;
};

export type GetPartnerResponse = GetPartnerResponses[keyof GetPartnerResponses];

export type UpdatePartnerData = {
    body: UpdatePartner;
    path: {
        /**
         * The ID of the partner to update
         */
        id: string;
    };
    query?: never;
    url: '/partners/{id}';
};

export type UpdatePartnerErrors = {
    /**
     * The partner could not be found.
     */
    404: unknown;
};

export type UpdatePartnerResponses = {
    /**
     * The partner has been successfully updated.
     */
    200: Partner;
};

export type UpdatePartnerResponse = UpdatePartnerResponses[keyof UpdatePartnerResponses];

export type GetPartnerTagsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/partner-tags';
};

export type GetPartnerTagsResponses = {
    /**
     * The partner tags have been successfully retrieved
     */
    200: Array<PartnerTag>;
};

export type GetPartnerTagsResponse = GetPartnerTagsResponses[keyof GetPartnerTagsResponses];

export type CreatePartnerTagData = {
    body: CreatePartnerTag;
    path?: never;
    query?: never;
    url: '/partner-tags';
};

export type CreatePartnerTagErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type CreatePartnerTagResponses = {
    /**
     * Partner tag created successfully
     */
    201: PartnerTag;
};

export type CreatePartnerTagResponse = CreatePartnerTagResponses[keyof CreatePartnerTagResponses];

export type SetPartnerTagsData = {
    /**
     * Array of partner tags to set
     */
    body: Array<CreatePartnerTag>;
    path?: never;
    query?: never;
    url: '/partner-tags/set';
};

export type SetPartnerTagsErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type SetPartnerTagsResponses = {
    /**
     * Partner tags set successfully
     */
    200: Array<PartnerTag>;
};

export type SetPartnerTagsResponse = SetPartnerTagsResponses[keyof SetPartnerTagsResponses];

export type DeletePartnerTagData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/partner-tags/{id}';
};

export type DeletePartnerTagErrors = {
    /**
     * Partner tag not found
     */
    404: unknown;
};

export type DeletePartnerTagResponses = {
    /**
     * Partner tag deleted successfully
     */
    200: unknown;
};

export type GetPartnerTagData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/partner-tags/{id}';
};

export type GetPartnerTagErrors = {
    /**
     * Partner tag not found
     */
    404: unknown;
};

export type GetPartnerTagResponses = {
    /**
     * Partner tag retrieved successfully
     */
    200: PartnerTag;
};

export type GetPartnerTagResponse = GetPartnerTagResponses[keyof GetPartnerTagResponses];

export type GetTradeItemsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/trade-items';
};

export type GetTradeItemsResponses = {
    /**
     * The trade items have been successfully retrieved
     */
    200: Array<TradeItem>;
};

export type GetTradeItemsResponse = GetTradeItemsResponses[keyof GetTradeItemsResponses];

export type CreateTradeItemData = {
    body: CreateTradeItem;
    path?: never;
    query?: never;
    url: '/trade-items';
};

export type CreateTradeItemErrors = {
    /**
     * The trade item could not be created
     */
    400: unknown;
};

export type CreateTradeItemResponses = {
    /**
     * The trade item has been successfully created
     */
    201: TradeItem;
};

export type CreateTradeItemResponse = CreateTradeItemResponses[keyof CreateTradeItemResponses];

export type DeleteTradeItemData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/trade-items/{id}';
};

export type DeleteTradeItemResponses = {
    /**
     * The trade item has been successfully deleted
     */
    200: unknown;
};

export type GetTradeItemData = {
    body?: never;
    path: {
        /**
         * The ID of the trade item to get
         */
        id: string;
    };
    query?: never;
    url: '/trade-items/{id}';
};

export type GetTradeItemErrors = {
    /**
     * The trade item could not be found
     */
    404: unknown;
};

export type GetTradeItemResponses = {
    /**
     * The trade item has been successfully retrieved
     */
    200: TradeItem;
};

export type GetTradeItemResponse = GetTradeItemResponses[keyof GetTradeItemResponses];

export type GetTradeItemByIdentifierData = {
    body?: never;
    path: {
        /**
         * The identifier of the trade item (format: {prefix}.{referenceNumber} or {prefix}.{referenceNumber}.{batchNumber})
         */
        identifier: string;
    };
    query?: never;
    url: '/trade-items/by-identifier/{identifier}';
};

export type GetTradeItemByIdentifierErrors = {
    /**
     * The trade item could not be found
     */
    404: unknown;
};

export type GetTradeItemByIdentifierResponses = {
    /**
     * The trade item has been successfully retrieved
     */
    200: TradeItem;
};

export type GetTradeItemByIdentifierResponse = GetTradeItemByIdentifierResponses[keyof GetTradeItemByIdentifierResponses];

export type GetTradeItemTagsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/trade-item-tags';
};

export type GetTradeItemTagsResponses = {
    /**
     * The trade item tags have been successfully retrieved
     */
    200: Array<TradeItemTag>;
};

export type GetTradeItemTagsResponse = GetTradeItemTagsResponses[keyof GetTradeItemTagsResponses];

export type CreateTradeItemTagData = {
    body: CreateTradeItemTag;
    path?: never;
    query?: never;
    url: '/trade-item-tags';
};

export type CreateTradeItemTagErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type CreateTradeItemTagResponses = {
    /**
     * Trade item tag created successfully
     */
    201: TradeItemTag;
};

export type CreateTradeItemTagResponse = CreateTradeItemTagResponses[keyof CreateTradeItemTagResponses];

export type SetTradeItemTagsData = {
    /**
     * Array of trade item tags to set
     */
    body: Array<CreateTradeItemTag>;
    path?: never;
    query?: never;
    url: '/trade-item-tags/set';
};

export type SetTradeItemTagsErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type SetTradeItemTagsResponses = {
    /**
     * Trade item tags set successfully
     */
    200: Array<TradeItemTag>;
};

export type SetTradeItemTagsResponse = SetTradeItemTagsResponses[keyof SetTradeItemTagsResponses];

export type DeleteTradeItemTagData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/trade-item-tags/{id}';
};

export type DeleteTradeItemTagErrors = {
    /**
     * Trade item tag not found
     */
    404: unknown;
};

export type DeleteTradeItemTagResponses = {
    /**
     * Trade item tag deleted successfully
     */
    200: unknown;
};

export type GetTradeItemTagData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/trade-item-tags/{id}';
};

export type GetTradeItemTagErrors = {
    /**
     * Trade item tag not found
     */
    404: unknown;
};

export type GetTradeItemTagResponses = {
    /**
     * Trade item tag retrieved successfully
     */
    200: TradeItemTag;
};

export type GetTradeItemTagResponse = GetTradeItemTagResponses[keyof GetTradeItemTagResponses];

export type CreateOrganizationData = {
    body: CreateOrganization;
    path?: never;
    query?: never;
    url: '/organizations';
};

export type CreateOrganizationErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type CreateOrganizationResponses = {
    /**
     * Organization created successfully
     */
    201: Organization;
};

export type CreateOrganizationResponse = CreateOrganizationResponses[keyof CreateOrganizationResponses];

export type DeleteOrganizationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/organizations/{id}';
};

export type DeleteOrganizationErrors = {
    /**
     * Organization not found
     */
    404: unknown;
};

export type DeleteOrganizationResponses = {
    /**
     * Organization deleted successfully
     */
    200: unknown;
};

export type GetOrganizationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/organizations/{id}';
};

export type GetOrganizationErrors = {
    /**
     * Organization not found
     */
    404: unknown;
};

export type GetOrganizationResponses = {
    /**
     * Organization retrieved successfully
     */
    200: Organization;
};

export type GetOrganizationResponse = GetOrganizationResponses[keyof GetOrganizationResponses];

export type UpdateOrganizationData = {
    body: UpdateOrganization;
    path: {
        id: string;
    };
    query?: never;
    url: '/organizations/{id}';
};

export type UpdateOrganizationErrors = {
    /**
     * Invalid request
     */
    400: unknown;
    /**
     * Organization not found
     */
    404: unknown;
};

export type UpdateOrganizationResponses = {
    /**
     * Organization updated successfully
     */
    200: Organization;
};

export type UpdateOrganizationResponse = UpdateOrganizationResponses[keyof UpdateOrganizationResponses];

export type GetEventsByIdentifierData = {
    body?: never;
    path: {
        /**
         * The identifier to get events for
         */
        identifier: string;
    };
    query?: never;
    url: '/provenance/{identifier}';
};

export type GetEventsByIdentifierErrors = {
    /**
     * No events found for the provided identifier
     */
    404: unknown;
};

export type GetEventsByIdentifierResponses = {
    /**
     * The events have been successfully retrieved
     */
    200: Array<Event>;
};

export type GetEventsByIdentifierResponse = GetEventsByIdentifierResponses[keyof GetEventsByIdentifierResponses];

export type RenderTrustGraphData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/render/discovery/trust-graph/{id}';
};

export type RenderTrustGraphResponses = {
    200: TrustGraphScreen;
};

export type RenderTrustGraphResponse = RenderTrustGraphResponses[keyof RenderTrustGraphResponses];

export type CreateSchemaData = {
    body: CreateSchema;
    path?: never;
    query?: never;
    url: '/schemas';
};

export type CreateSchemaErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type CreateSchemaResponses = {
    /**
     * Schema created successfully
     */
    201: Schema;
};

export type CreateSchemaResponse = CreateSchemaResponses[keyof CreateSchemaResponses];

export type DeleteSchemaData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/schemas/{id}';
};

export type DeleteSchemaErrors = {
    /**
     * Schema not found
     */
    404: unknown;
};

export type DeleteSchemaResponses = {
    /**
     * Schema deleted successfully
     */
    200: unknown;
};

export type GetSchemaData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/schemas/{id}';
};

export type GetSchemaErrors = {
    /**
     * Schema not found
     */
    404: unknown;
};

export type GetSchemaResponses = {
    /**
     * Schema retrieved successfully
     */
    200: Schema;
};

export type GetSchemaResponse = GetSchemaResponses[keyof GetSchemaResponses];

export type UpdateSchemaData = {
    body: UpdateSchema;
    path: {
        id: string;
    };
    query?: never;
    url: '/schemas/{id}';
};

export type UpdateSchemaErrors = {
    /**
     * Invalid request
     */
    400: unknown;
    /**
     * Schema not found
     */
    404: unknown;
};

export type UpdateSchemaResponses = {
    /**
     * Schema updated successfully
     */
    200: Schema;
};

export type UpdateSchemaResponse = UpdateSchemaResponses[keyof UpdateSchemaResponses];

export type ClientOptions = {
    baseUrl: string;
};